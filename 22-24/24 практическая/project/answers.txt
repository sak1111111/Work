Ответы на вопросы для самоконтроля

1. Какие методы HTTP используются для CRUD операций и в каких случаях?

GET - получение данных (чтение)
POST - создание новых данных
PUT/PATCH - обновление данных (PUT - полное обновление, PATCH - частичное)
DELETE - удаление данных

2. Как организовать обработку ошибок на фронтенде при работе с API?

Использование интерцепторов в Axios для централизованной обработки ошибок
Разделение ошибок на сетевые, серверные и клиентские
Пользовательские сообщения об ошибках
Graceful degradation - приложение продолжает работать при ошибках

3. Что такое CORS и как его настроить для разработки?

CORS (Cross-Origin Resource Sharing) - механизм безопасности браузера. Для разработки:
```javascript
app.use(cors()); // Разрешает все домены

4. Какие подходы к управлению состоянием при интеграции с API вы знаете?
Локальное состояние React (useState, useReducer)

Context API для глобального состояния

Библиотеки управления состоянием (Redux, Zustand)

React Query/SWR для кэширования серверного состояния

5. Как реализовать индикацию загрузки без ухудшения UX?
Показывать скелетоны вместо спиннеров

Использовать оптимистичные обновления

Локальная индикация для конкретных операций

Отключение кнопок во время загрузки

6. В чем преимущества и недостатки оптимистичных обновлений?
Преимущества:

Лучший пользовательский опыт

Мгновенная обратная связь

Недостатки:

Сложность реализации отката при ошибках

Потенциальная рассинхронизация данных

7. Как организовать валидацию данных на клиенте и сервере?
Клиент:

Валидация форм в реальном времени

Показа ошибок пользователю

Предотвращение отправки невалидных данных

Сервер:

Обязательная валидация всех входящих данных

Подробные сообщения об ошибках

Защита от SQL-инъекций и XSS атак

8. Какие методы кэширования данных с сервера можно использовать?
HTTP кэширование (Cache-Control headers)

Кэширование в браузере (localStorage, sessionStorage)

Библиотеки для кэширования (React Query, SWR, Apollo Client)

Service Workers для офлайн-работы