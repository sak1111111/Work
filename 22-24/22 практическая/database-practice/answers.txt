Ответы на вопросы для самоконтроля

1. В чем преимущества использования миграций для управления схемой БД?

Преимущества миграций:
- Контроль версий схемы БД - возможность отслеживать изменения
- Воспроизводимость - одинаковое состояние БД на всех окружениях
- Автоматизация развертывания - последовательное применение изменений
- Откат изменений - возможность вернуться к предыдущей версии схемы
- Коллаборация - несколько разработчиков могут работать с одной БД
- Документирование - история изменений структуры БД

2. Какие типы связей между таблицами вы знаете и как их организовать?

Основные типы связей:
- Один-к-одному (One-to-One) - внешний ключ в одной из таблиц с UNIQUE constraint
- Один-ко-многим (One-to-Many) - внешний ключ в таблице "многие"
- Многие-ко-многим (Many-to-Many) - связующая таблица с двумя внешними ключами
- Самосвязь (Self-relationship) - внешний ключ ссылается на ту же таблицу

Организация через FOREIGN KEY constraints с указанием ON DELETE и ON UPDATE правил.

3. Что такое ORM и каковы его преимущества перед нативными SQL-запросами?

ORM (Object-Relational Mapping) - технология преобразования данных между реляционной БД и объектной моделью.

Преимущества ORM:
- Абстракция от конкретной СУБД
- Безопасность от SQL-инъекций
- Ускорение разработки
- Автоматическое управление соединениями
- Кэширование запросов
- Валидация данных
- Миграции схемы

Недостатки:
- Сложные запросы могут быть менее эффективны
- Дополнительный слой абстракции
- Кривая обучения

4. Как организовать пагинацию на уровне базы данных?

Основные методы:
- LIMIT/OFFSET - SELECT * FROM table LIMIT 10 OFFSET 20
- Keyset pagination (курсорная) - WHERE id > last_id LIMIT 10
- Нумерованные страницы с подсчетом общего количества

Оптимальный подход - keyset pagination:
- Лучшая производительность на больших данных
- Нет проблем с пропуском записей при изменении данных
- Не требует COUNT(*) для общего количества

5. Что такое транзакции и когда их следует использовать?

Транзакция - последовательность операций, выполняемых как единое целое по принципу "все или ничего".

Свойства ACID:
- Atomicity (Атомарность)
- Consistency (Согласованность)
- Isolation (Изолированность)
- Durability (Долговечность)

Использовать когда:
- Несколько связанных операций
- Финансовые операции
- Обновления нескольких таблиц
- Критичные к целостности данные

6. Какие методы оптимизации запросов к базе данных вы знаете?

Методы оптимизации:
- Индексы на часто используемых полях
- Нормализация/денормализация схемы
- Оптимизация JOIN запросов
- Кэширование частых запросов
- Пакетная обработка запросов
- Использование EXPLAIN для анализа
- Оптимизация типов данных
- Разделение таблиц (партиционирование)
- Репликация для чтения

7. Как организовать обработку ошибок при работе с БД?

Уровни обработки ошибок:
- Уровень драйвера БД - перехват исключений соединения
- Уровень ORM - обработка ошибок валидации и запросов
- Уровень бизнес-логики - специфичная обработка ошибок
- Уровень приложения - универсальные обработчики

Практики:
- Граннулированные исключения
- Логирование ошибок с контекстом
- Retry механизмы для временных ошибок
- Пользовательские сообщения об ошибках
- Мониторинг и алертинг

8. В чем разница между внутренним и внешним соединением таблиц?

INNER JOIN (внутреннее):
- Возвращает только совпадающие записи из обеих таблиц
- Записи без соответствия отбрасываются

OUTER JOIN (внешнее):
- LEFT JOIN - все записи левой таблицы + совпадающие правой
- RIGHT JOIN - все записи правой таблицы + совпадающие левой
- FULL JOIN - все записи из обеих таблиц

Пример:
INNER JOIN вернет только пользователей с заказами
LEFT JOIN вернет всех пользователей, даже без заказов