function handleBasicClick(event) {
    const output = document.getElementById('basic-output');
    
    const eventInfo = {
        type: event.type,
        target: event.target.tagName,
        clientX: event.clientX,
        clientY: event.clientY,
        timestamp: new Date().toLocaleTimeString()
    };
    
    output.innerHTML = `
        <div class="info fade-in">
            <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏:</strong><br>
            –¢–∏–ø: ${eventInfo.type}<br>
            –≠–ª–µ–º–µ–Ω—Ç: ${eventInfo.target}<br>
            –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (${eventInfo.clientX}, ${eventInfo.clientY})<br>
            –í—Ä–µ–º—è: ${eventInfo.timestamp}
        </div>
    `;
    
    event.target.classList.add('pulse');
    setTimeout(() => {
        event.target.classList.remove('pulse');
    }, 500);
}

function handleMouseEvents(event) {
    const colorBox = document.getElementById('color-box');
    const output = document.getElementById('mouse-output');
    
    switch(event.type) {
        case 'mouseenter':
            colorBox.style.backgroundColor = '#e74c3c';
            colorBox.textContent = '–ö—É—Ä—Å–æ—Ä –≤–Ω—É—Ç—Ä–∏';
            break;
            
        case 'mouseleave':
            colorBox.style.backgroundColor = '#3498db';
            colorBox.textContent = '–ù–∞–≤–µ–¥–∏ –∫—É—Ä—Å–æ—Ä';
            break;
            
        case 'mousemove':
            const rect = colorBox.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            
            output.innerHTML = `
                <div class="info">
                    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: (${Math.round(x)}, ${Math.round(y)})<br>
                    –®–∏—Ä–∏–Ω–∞: ${rect.width}px, –í—ã—Å–æ—Ç–∞: ${rect.height}px
                </div>
            `;
            break;
    }
}

function setupBasicEvents() {
    const basicBtn = document.getElementById('basic-btn');
    const colorBox = document.getElementById('color-box');
    
    basicBtn.addEventListener('click', handleBasicClick);
    
    colorBox.addEventListener('mouseenter', handleMouseEvents);
    colorBox.addEventListener('mouseleave', handleMouseEvents);
    colorBox.addEventListener('mousemove', handleMouseEvents);
}

function handleKeyEvents(event) {
    const output = document.getElementById('key-output');
    
    const keyInfo = {
        key: event.key,
        code: event.code,
        ctrlKey: event.ctrlKey,
        altKey: event.altKey,
        shiftKey: event.shiftKey,
        type: event.type
    };
    
    let specialMessage = '';
    
    if (event.ctrlKey && event.key === 's') {
        event.preventDefault();
        specialMessage = '<div class="warning">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ (Ctrl+S)</div>';
    }
    
    if (event.altKey && event.key === 'c') {
        event.preventDefault();
        specialMessage = '<div class="warning">–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ (Alt+C)</div>';
    }
    
    if (event.shiftKey && event.key === 'a') {
        event.preventDefault();
        specialMessage = '<div class="warning">–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ (Shift+A)</div>';
    }
    
    output.innerHTML = `
        ${specialMessage}
        <div class="info fade-in">
            <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–≤–∏—à–µ:</strong><br>
            –ö–ª–∞–≤–∏—à–∞: "${keyInfo.key}"<br>
            –ö–æ–¥: ${keyInfo.code}<br>
            Ctrl: ${keyInfo.ctrlKey}<br>
            Alt: ${keyInfo.altKey}<br>
            Shift: ${keyInfo.shiftKey}<br>
            –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: ${keyInfo.type}
        </div>
    `;
}

function setupKeyboardEvents() {
    const keyInput = document.getElementById('key-input');
    
    keyInput.addEventListener('keydown', handleKeyEvents);
    keyInput.addEventListener('keyup', (event) => {
        console.log('Keyup:', event.key);
    });
    
    keyInput.focus();
}

function handleDelegationClick(event) {
    const target = event.target;
    
    if (target.classList.contains('item') || target.parentElement.classList.contains('item')) {
        const item = target.classList.contains('item') ? target : target.parentElement;
        item.classList.toggle('selected');
    }
    
    if (target.classList.contains('delete')) {
        const item = target.closest('.item');
        if (item) {
            item.remove();
        }
    }
    
    updateDelegationOutput();
}

function updateDelegationOutput() {
    const output = document.getElementById('delegation-output');
    const selectedItems = document.querySelectorAll('.item.selected');
    const allItems = document.querySelectorAll('.item');
    
    output.innerHTML = `
        <div class="info">
            <strong>–°—Ç–∞—Ç—É—Å —Å–ø–∏—Å–∫–∞:</strong><br>
            –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${allItems.length}<br>
            –í—ã–±—Ä–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${selectedItems.length}<br>
            ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö: [${Array.from(selectedItems).map(item => item.dataset.id).join(', ')}]
        </div>
    `;
}

function addNewItem() {
    const itemList = document.getElementById('item-list');
    const items = itemList.querySelectorAll('.item');
    const nextId = items.length + 1;
    
    const newItem = document.createElement('li');
    newItem.className = 'item fade-in';
    newItem.dataset.id = nextId.toString();
    
    newItem.innerHTML = `
        <span>–≠–ª–µ–º–µ–Ω—Ç ${nextId}</span>
        <button class="delete">√ó</button>
    `;
    
    itemList.appendChild(newItem);
    updateDelegationOutput();
}

function setupDelegationEvents() {
    const itemList = document.getElementById('item-list');
    const addBtn = document.getElementById('add-item-btn');
    
    itemList.addEventListener('click', handleDelegationClick);
    addBtn.addEventListener('click', addNewItem);
    updateDelegationOutput();
}

function preventLinkDefault(event) {
    event.preventDefault();
    
    const output = document.getElementById('prevention-output');
    output.innerHTML = `
        <div class="warning shake">
            ‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω!<br>
            –û–±—ã—á–Ω–æ –≤—ã –±—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞: ${event.target.href}
        </div>
    `;
    
    event.target.classList.add('shake');
    setTimeout(() => {
        event.target.classList.remove('shake');
    }, 500);
}

function preventFormSubmit(event) {
    event.preventDefault();
    
    const input = document.getElementById('prevent-input');
    const output = document.getElementById('prevention-output');
    
    if (!input.value.trim()) {
        output.innerHTML = `
            <div class="error shake">
                ‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º!
            </div>
        `;
        
        input.classList.add('shake');
        setTimeout(() => {
            input.classList.remove('shake');
        }, 500);
        return;
    }
    
    output.innerHTML = `
        <div class="success bounce">
            ‚úÖ –§–æ—Ä–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!<br>
            –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "<strong>${input.value}</strong>"<br>
            <small>–û–±—ã—á–Ω–æ —Ñ–æ—Ä–º–∞ –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä</small>
        </div>
    `;
    
    input.value = '';
}

function setupPreventionEvents() {
    const preventLink = document.getElementById('prevent-link');
    const preventForm = document.getElementById('prevent-form');
    
    preventLink.addEventListener('click', preventLinkDefault);
    preventForm.addEventListener('submit', preventFormSubmit);
}

function triggerCustomEvent() {
    const customEvent = new CustomEvent('customAction', {
        detail: {
            message: "–ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è!",
            timestamp: new Date().toLocaleTimeString(),
            randomNumber: Math.random()
        },
        bubbles: true,
        cancelable: true
    });
    
    document.dispatchEvent(customEvent);
}

function handleCustomEvent(event) {
    const output = document.getElementById('custom-output');
    const { message, timestamp, randomNumber } = event.detail;
    
    output.innerHTML = `
        <div class="success bounce">
            üéâ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!<br>
            –°–æ–æ–±—â–µ–Ω–∏–µ: <strong>${message}</strong><br>
            –í—Ä–µ–º—è: ${timestamp}<br>
            –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: ${randomNumber.toFixed(4)}
        </div>
    `;
    
    const btn = document.getElementById('trigger-custom');
    btn.classList.add('bounce');
    setTimeout(() => {
        btn.classList.remove('bounce');
    }, 500);
}

function setupMultipleListeners() {
    document.addEventListener('customAction', function(event) {
        console.log('–ü–µ—Ä–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:', event.detail);
    });
    
    document.addEventListener('customAction', function(event) {
        console.log('–í—Ç–æ—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:', event.detail.timestamp);
    });
    
    document.addEventListener('customAction', function(event) {
        const output = document.getElementById('custom-output');
        output.innerHTML += `
            <div class="info">
                üì¢ –¢—Ä–µ—Ç–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!<br>
                –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: 3
            </div>
        `;
    });
    
    triggerCustomEvent();
}

function setupCustomEvents() {
    const triggerBtn = document.getElementById('trigger-custom');
    const multipleBtn = document.getElementById('multiple-listeners');
    
    document.addEventListener('customAction', handleCustomEvent);
    triggerBtn.addEventListener('click', triggerCustomEvent);
    multipleBtn.addEventListener('click', setupMultipleListeners);
}

function loadImageWithEvents() {
    const container = document.getElementById('image-container');
    const output = document.getElementById('loading-output');
    
    container.innerHTML = '';
    output.innerHTML = '<div class="info">üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç—ë–Ω–∫–∞...</div>';
    
    const img = new Image();
    
    img.addEventListener('loadstart', () => {
        output.innerHTML += '<div class="info">üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...</div>';
    });
    
    img.addEventListener('load', () => {
        output.innerHTML += '<div class="success">‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç—ë–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</div>';
        container.appendChild(img);
    });
    
    img.addEventListener('error', () => {
        output.innerHTML += '<div class="error">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç—ë–Ω–∫–∞!</div>';
    });
    
    img.addEventListener('loadend', () => {
        output.innerHTML += '<div class="info">üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</div>';
    });
    
    img.src = 'https://placekitten.com/300/200?' + Date.now();
    img.alt = '–ú–∏–ª—ã–π –∫–æ—Ç—ë–Ω–æ–∫';
}

function simulateLoadError() {
    const container = document.getElementById('image-container');
    const output = document.getElementById('loading-output');
    
    container.innerHTML = '';
    output.innerHTML = '<div class="info">üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç—ë–Ω–∫–∞...</div>';
    
    const img = new Image();
    
    img.addEventListener('error', () => {
        output.innerHTML += `
            <div class="error shake">
                ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç—ë–Ω–∫–∞!<br>
                <small>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</small>
            </div>
        `;
    });
    
    img.src = 'https://invalid-kitten-website-that-does-not-exist.com/kitten.jpg?' + Date.now();
}

function setupLoadingEvents() {
    const loadBtn = document.getElementById('load-image');
    const errorBtn = document.getElementById('load-error');
    
    loadBtn.addEventListener('click', loadImageWithEvents);
    errorBtn.addEventListener('click', simulateLoadError);
}

let timerInterval;
let timerValue = 0;

function startTimer() {
    const output = document.getElementById('timer-output');
    const startBtn = document.getElementById('start-timer');
    
    if (timerInterval) {
        output.textContent = '–¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!';
        return;
    }
    
    timerValue = 0;
    output.textContent = '0 —Å–µ–∫';
    startBtn.disabled = true;
    
    timerInterval = setInterval(() => {
        timerValue++;
        output.textContent = `${timerValue} —Å–µ–∫`;
        
        if (timerValue % 5 === 0) {
            output.classList.add('pulse');
            setTimeout(() => output.classList.remove('pulse'), 500);
        }
    }, 1000);
}

function stopTimer() {
    const startBtn = document.getElementById('start-timer');
    
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
        startBtn.disabled = false;
        
        const output = document.getElementById('timer-output');
        output.innerHTML = `<span class="success">‚è±Ô∏è –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${timerValue} —Å–µ–∫</span>`;
    }
}

function createDebounce(func, delay) {
    let timeoutId;
    
    return function(...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
    };
}

function createThrottle(func, interval) {
    let lastCall = 0;
    let timeoutId;
    
    return function(...args) {
        const now = Date.now();
        
        if (now - lastCall < interval) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                lastCall = now;
                func.apply(this, args);
            }, interval - (now - lastCall));
            return;
        }
        
        lastCall = now;
        func.apply(this, args);
    };
}

function testDebounce() {
    const output = document.getElementById('async-output');
    output.innerHTML = '<div class="info">üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Debounce...</div>';
    
    let normalCount = 0;
    const normalFunc = () => {
        normalCount++;
        output.innerHTML += `<div>–û–±—ã—á–Ω—ã–π –≤—ã–∑–æ–≤: ${normalCount}</div>`;
    };
    
    let debounceCount = 0;
    const debounceFunc = createDebounce(() => {
        debounceCount++;
        output.innerHTML += `<div class="success">Debounce –≤—ã–∑–æ–≤: ${debounceCount}</div>`;
    }, 1000);
    
    output.innerHTML += '<div class="warning">–ë—ã—Å—Ç—Ä—ã–µ –≤—ã–∑–æ–≤—ã (5 —Ä–∞–∑)...</div>';
    
    for (let i = 0; i < 5; i++) {
        normalFunc();
        debounceFunc();
    }
    
    output.innerHTML += '<div class="info">Debounce —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É</div>';
}

function testThrottle() {
    const output = document.getElementById('async-output');
    output.innerHTML = '<div class="info">üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Throttle...</div>';
    
    let normalCount = 0;
    const normalFunc = () => {
        normalCount++;
        output.innerHTML += `<div>–û–±—ã—á–Ω—ã–π –≤—ã–∑–æ–≤: ${normalCount}</div>`;
    };
    
    let throttleCount = 0;
    const throttleFunc = createThrottle(() => {
        throttleCount++;
        output.innerHTML += `<div class="success">Throttle –≤—ã–∑–æ–≤: ${throttleCount}</div>`;
    }, 1000);
    
    output.innerHTML += '<div class="warning">–ë—ã—Å—Ç—Ä—ã–µ –≤—ã–∑–æ–≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥...</div>';
    
    const startTime = Date.now();
    const testInterval = setInterval(() => {
        normalFunc();
        throttleFunc();
        
        if (Date.now() - startTime > 3000) {
            clearInterval(testInterval);
            output.innerHTML += '<div class="info">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>';
        }
    }, 200);
}

function setupTimerEvents() {
    const startBtn = document.getElementById('start-timer');
    const stopBtn = document.getElementById('stop-timer');
    const debounceBtn = document.getElementById('debounce-btn');
    const throttleBtn = document.getElementById('throttle-btn');
    
    startBtn.addEventListener('click', startTimer);
    stopBtn.addEventListener('click', stopTimer);
    debounceBtn.addEventListener('click', testDebounce);
    throttleBtn.addEventListener('click', testThrottle);
}

document.addEventListener('DOMContentLoaded', function() {
    setupBasicEvents();
    setupKeyboardEvents();
    setupDelegationEvents();
    setupPreventionEvents();
    setupCustomEvents();
    setupLoadingEvents();
    setupTimerEvents();
    
    console.log('üöÄ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
    
    const testBtn = document.createElement('button');
    testBtn.textContent = 'üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã';
    testBtn.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #28a745;
        z-index: 1000;
    `;
    
    testBtn.addEventListener('click', () => {
        if (typeof runAllTests === 'function') {
            runAllTests();
        } else {
            console.log('–¢–µ—Å—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
    });
    
    document.body.appendChild(testBtn);
});