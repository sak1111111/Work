
class DomTests {
    constructor() {
        this.passed = 0;
        this.failed = 0;
        this.setupTestEnvironment();
    }

    setupTestEnvironment() {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π DOM
        document.body.innerHTML = `
            <div id="test-target1"></div>
            <div id="test-parent">
                <div class="test-child">Child 1</div>
                <div class="test-child special">Special Child</div>
                <div class="test-child">Child 3</div>
            </div>
            <div id="test-style-target"></div>
            <button id="test-click-btn"></button>
            <span id="test-click-counter">–ö–ª–∏–∫–æ–≤: 0</span>
            <input id="test-text-input">
            <span id="test-input-display"></span>
            <ul id="test-dynamic-list"></ul>
            <input id="test-item-input">
        `;
    }

    runAllTests() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ DOM –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π...\n');
        
        this.testCreateCard();
        this.testCreateList();
        this.testCountChildren();
        this.testFindSpecialChild();
        this.testGetParentBackground();
        this.testStyleToggle();
        this.testClickCounter();
        this.testInputDisplay();
        this.testAddListItem();
        this.testRemoveListItem();
        this.testClearList();
        this.testValidateForm();
        
        this.printResults();
    }

    assert(condition, message) {
        if (condition) {
            console.log(`‚úÖ PASS: ${message}`);
            this.passed++;
        } else {
            console.log(`‚ùå FAIL: ${message}`);
            this.failed++;
        }
    }

    testCreateCard() {
        console.log('\nüìã –¢–µ—Å—Ç 1: createCard');
        
        const testTarget = document.getElementById('test-target1');
        testTarget.innerHTML = '';
        
        const card = document.createElement('div');
        card.className = 'card';
        
        const title = document.createElement('h4');
        title.textContent = 'Test Title';
        
        const content = document.createElement('p');
        content.textContent = 'Test Content';
        
        card.appendChild(title);
        card.appendChild(content);
        testTarget.appendChild(card);
        
        const createdCard = testTarget.querySelector('.card');
        this.assert(createdCard !== null, '–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞');
        this.assert(createdCard.querySelector('h4').textContent === 'Test Title', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å');
        this.assert(createdCard.querySelector('p').textContent === 'Test Content', '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å');
    }

    testCreateList() {
        console.log('\nüìã –¢–µ—Å—Ç 2: createList');
        
        const testTarget = document.getElementById('test-target1');
        testTarget.innerHTML = '';
        
        const items = ['Item 1', 'Item 2', 'Item 3'];
        const ol = document.createElement('ol');
        
        items.forEach(item => {
            const li = document.createElement('li');
            li.textContent = item;
            ol.appendChild(li);
        });
        
        testTarget.appendChild(ol);
        
        const createdList = testTarget.querySelector('ol');
        this.assert(createdList !== null, '–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω');
        this.assert(createdList.children.length === 3, '–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —ç–ª–µ–º–µ–Ω—Ç–∞');
        this.assert(createdList.children[0].textContent === 'Item 1', '–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "Item 1"');
    }

    testCountChildren() {
        console.log('\nüìã –¢–µ—Å—Ç 3: countChildren');
        
        const parent = document.getElementById('test-parent');
        const count = parent.children.length;
        
        this.assert(count === 3, `–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: ${count}`);
    }

    testFindSpecialChild() {
        console.log('\nüìã –¢–µ—Å—Ç 4: findSpecialChild');
        
        const parent = document.getElementById('test-parent');
        const specialChild = parent.querySelector('.special');
        const text = specialChild ? specialChild.textContent : '';
        
        this.assert(text === 'Special Child', `–¢–µ–∫—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "Special Child", –ø–æ–ª—É—á–µ–Ω–æ: "${text}"`);
    }

    testGetParentBackground() {
        console.log('\nüìã –¢–µ—Å—Ç 5: getParentBackground');
        
        const child = document.querySelector('.test-child');
        const parent = child.parentElement;
        parent.style.backgroundColor = 'rgb(255, 0, 0)';
        
        const style = window.getComputedStyle(parent);
        const bgColor = style.backgroundColor;
        
        this.assert(bgColor === 'rgb(255, 0, 0)', `–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å rgb(255, 0, 0), –ø–æ–ª—É—á–µ–Ω–æ: ${bgColor}`);
    }

    testStyleToggle() {
        console.log('\nüìã –¢–µ—Å—Ç 6: Style Toggle');
        
        const target = document.getElementById('test-style-target');
        
        target.classList.add('active-style');
        this.assert(target.classList.contains('active-style'), '–ö–ª–∞—Å—Å active-style –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω');
        
        target.classList.remove('active-style');
        this.assert(!target.classList.contains('active-style'), '–ö–ª–∞—Å—Å active-style –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω');
        
        target.classList.toggle('active-style');
        this.assert(target.classList.contains('active-style'), '–ö–ª–∞—Å—Å active-style –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ toggle');
        
        target.classList.toggle('active-style');
        this.assert(!target.classList.contains('active-style'), '–ö–ª–∞—Å—Å active-style –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ toggle');
    }

    testClickCounter() {
        console.log('\nüìã –¢–µ—Å—Ç 7: Click Counter');
        
        let count = 0;
        const counter = document.getElementById('test-click-counter');
        
        for (let i = 0; i < 5; i++) {
            count++;
            counter.textContent = `–ö–ª–∏–∫–æ–≤: ${count}`;
        }
        
        this.assert(count === 5, `–°—á–µ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 5 –∫–ª–∏–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ: ${count}`);
        this.assert(counter.textContent === '–ö–ª–∏–∫–æ–≤: 5', `–¢–µ–∫—Å—Ç —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–ö–ª–∏–∫–æ–≤: 5", –ø–æ–ª—É—á–µ–Ω–æ: "${counter.textContent}"`);
    }

    testInputDisplay() {
        console.log('\nüìã –¢–µ—Å—Ç 8: Input Display');
        
        const input = document.getElementById('test-text-input');
        const display = document.getElementById('test-input-display');
        
        const testText = 'Hello World';
        input.value = testText;
        
        const event = new Event('input');
        input.dispatchEvent(event);
        display.textContent = input.value;
        
        this.assert(display.textContent === testText, `Display –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "${testText}", –ø–æ–ª—É—á–µ–Ω–æ: "${display.textContent}"`);
    }

    testAddListItem() {
        console.log('\nüìã –¢–µ—Å—Ç 9: Add List Item');
        
        const list = document.getElementById('test-dynamic-list');
        const input = document.getElementById('test-item-input');
        
        list.innerHTML = '';
        
        const testItems = ['Task 1', 'Task 2', 'Task 3'];
        
        testItems.forEach(item => {
            const li = document.createElement('li');
            li.className = 'list-item';
            
            const span = document.createElement('span');
            span.textContent = item;
            
            const deleteBtn = document.createElement('button');
            deleteBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
            
            li.appendChild(span);
            li.appendChild(deleteBtn);
            list.appendChild(li);
        });
        
        this.assert(list.children.length === 3, `–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: ${list.children.length}`);
        this.assert(list.querySelector('.list-item span').textContent === 'Task 1', '–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "Task 1"');
    }

    testRemoveListItem() {
        console.log('\nüìã –¢–µ—Å—Ç 10: Remove List Item');
        
        const list = document.getElementById('test-dynamic-list');
        const initialCount = list.children.length;
        
        if (list.firstChild) {
            list.firstChild.remove();
        }
        
        this.assert(list.children.length === initialCount - 1, `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –Ω–∞ 1, –±—ã–ª–æ: ${initialCount}, —Å—Ç–∞–ª–æ: ${list.children.length}`);
    }

    testClearList() {
        console.log('\nüìã –¢–µ—Å—Ç 11: Clear List');
        
        const list = document.getElementById('test-dynamic-list');
        list.innerHTML = '';
        
        this.assert(list.children.length === 0, `–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${list.children.length}`);
    }

    testValidateForm() {
        console.log('\nüìã –¢–µ—Å—Ç 12: Validate Form');
        
        const validData = {
            name: 'John Doe',
            email: 'john@example.com',
            age: '25'
        };
        
        const invalidData = {
            name: 'J', // —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
            email: 'invalid-email', // –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email
            age: '150' // —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –≤–æ–∑—Ä–∞—Å—Ç
        };
        
        const validateForm = (formData) => {
            const errors = {};
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            
            if (!formData.name.trim() || formData.name.trim().length < 2) {
                errors.name = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
            }
            
            if (!formData.email.trim() || !emailRegex.test(formData.email)) {
                errors.email = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
            }
            
            const age = parseInt(formData.age);
            if (!formData.age || isNaN(age) || age < 1 || age > 120) {
                errors.age = '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 120';
            }
            
            return Object.keys(errors).length === 0 ? null : errors;
        };
        
        const validResult = validateForm(validData);
        const invalidResult = validateForm(invalidData);
        
        this.assert(validResult === null, '–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É');
        this.assert(invalidResult !== null, '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É');
        this.assert(invalidResult && invalidResult.name, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∏–º–µ–Ω–∏');
        this.assert(invalidResult && invalidResult.email, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ email');
        this.assert(invalidResult && invalidResult.age, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞');
    }

    printResults() {
        console.log('\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${this.passed + this.failed}`);
        
        const successRate = (this.passed / (this.passed + this.failed)) * 100;
        console.log(`üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate.toFixed(1)}%`);
        
        if (this.failed === 0) {
            console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\nüí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π.');
        }
    }
}

document.addEventListener('DOMContentLoaded', function() {

    const testBtn = document.createElement('button');
    testBtn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã';
    testBtn.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #28a745;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        z-index: 1000;
    `;
    
    testBtn.addEventListener('click', () => {
        const tests = new DomTests();
        tests.runAllTests();
    });
    
    document.body.appendChild(testBtn);
    
    console.log('–¢–µ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.');
});