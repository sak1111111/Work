// fetch-tests.js
async function runTest(testName, testFunction) {
    console.log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`);
    try {
        await testFunction();
        console.log(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: ${testName}`);
        return true;
    } catch (error) {
        console.error(`‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${testName}`, error);
        return false;
    }
}

// –¢–µ—Å—Ç—ã –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
async function testFetchGetRequest() {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
    if (!response.ok) throw new Error('GET –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è');
    const data = await response.json();
    if (!data.title) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
}

async function testFetchJsonData() {
    const response = await fetch('https://jsonplaceholder.typicode.com/users');
    const users = await response.json();
    if (!Array.isArray(users) || users.length === 0) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
}

// –¢–µ—Å—Ç—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
async function testFetchPostRequest() {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title: 'Test', body: 'Content', userId: 1 })
    });
    const data = await response.json();
    if (!data.id) throw new Error('POST –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª ID');
}

async function testFetchPutRequest() {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: 1, title: 'Updated', body: 'Content', userId: 1 })
    });
    const data = await response.json();
    if (data.title !== 'Updated') throw new Error('PUT –∑–∞–ø—Ä–æ—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ');
}

// –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async function testFetchHttpError() {
    const response = await fetch('https://jsonplaceholder.typicode.com/nonexistent');
    if (response.status !== 404) throw new Error('–û–∂–∏–¥–∞–ª–∞—Å—å 404 –æ—à–∏–±–∫–∞');
}

// –¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async function testFetchWithPromiseAll() {
    const startTime = Date.now();
    const [users, posts] = await Promise.all([
        fetch('https://jsonplaceholder.typicode.com/users').then(r => r.json()),
        fetch('https://jsonplaceholder.typicode.com/posts').then(r => r.json())
    ]);
    if (!users.length || !posts.length) throw new Error('Promise.all –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Fetch API\n');
    
    const tests = [
        { name: 'GET –∑–∞–ø—Ä–æ—Å', test: testFetchGetRequest },
        { name: 'JSON –¥–∞–Ω–Ω—ã–µ', test: testFetchJsonData },
        { name: 'POST –∑–∞–ø—Ä–æ—Å', test: testFetchPostRequest },
        { name: 'PUT –∑–∞–ø—Ä–æ—Å', test: testFetchPutRequest },
        { name: 'HTTP –æ—à–∏–±–∫–∏', test: testFetchHttpError },
        { name: 'Promise.all', test: testFetchWithPromiseAll }
    ];
    
    let passed = 0;
    for (const test of tests) {
        const result = await runTest(test.name, test.test);
        if (result) passed++;
    }
    
    console.log(`\nüìä –ò—Ç–æ–≥–∏: ${passed}/${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    // –í–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ DOM
    if (typeof document !== 'undefined') {
        const testReport = document.createElement('div');
        testReport.innerHTML = `
            <div style="background: white; padding: 20px; margin: 20px 0; border-radius: 8px;">
                <h3>üìã –û—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Fetch API</h3>
                <p><strong>–ü—Ä–æ–π–¥–µ–Ω–æ:</strong> ${passed} —Ç–µ—Å—Ç–æ–≤</p>
                <p><strong>–í—Å–µ–≥–æ:</strong> ${tests.length} —Ç–µ—Å—Ç–æ–≤</p>
                <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> ${Math.round((passed/tests.length)*100)}%</p>
                <p>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ (F12)</p>
            </div>
        `;
        document.body.prepend(testReport);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (typeof window !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        const testButton = document.createElement('button');
        testButton.textContent = 'üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã';
        testButton.style.background = '#9b59b6';
        testButton.addEventListener('click', runAllTests);
        
        const container = document.querySelector('.container');
        if (container) {
            container.prepend(testButton);
        }
    });
}